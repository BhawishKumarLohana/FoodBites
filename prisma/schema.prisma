// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  COMPLETE
}

enum UserType {
  ORGANIZATION
  RESTAURANT
  INDIVIDUAL_DONOR
}
enum ActionType{
  CREATE_FOOD
  UPDATE_FOOD
  DELETE_FOOD
  CLAIM_FOOD
  CANCEL_CLAIM
}

model User {
  userId           Int      @id @default(autoincrement())
  type             UserType
  email            String   @unique
  password         String
  address          String
  country          String
  city             String
  createdAt        DateTime @default(now())
  primary_PhoneN   String
  secondary_PhoneN String

  // Specializations (1:1) 
  organization    Organization?
  restaurant      Restaurant?
  individualDonor IndividualDonor?
  //relations
  activitylog ActivityLog[]
  food Food[]
}

model Organization {
  userId      Int         @id @unique
  orgName     String
  regNumber   Int?        @unique //optional
  description String? //optional
  type        String //NGO,NPO,ETC
  foodclaim FoodClaim[]
  user        User        @relation(fields: [userId], references: [userId])
}

model IndividualDonor {
  userId    Int         @id @unique
  fullName  String
  idcard    String?     @unique
  user      User        @relation(fields: [userId], references: [userId])
}

model Restaurant {
  userId      Int     @id @unique
  ResName     String
  openTime    String
  closeTime   String
  description String?

  foodId    Int?        @unique
  user      User        @relation(fields: [userId], references: [userId])
}

model Food {
  foodId     Int         @id @unique @default(autoincrement())
  claimId    Int?         @unique
  DonatedBy    Int         
  isDelivery    Boolean? @default(false)
  title      String    
  quantity   String
  deadline   DateTime
  foodclaim FoodClaim[]

  user User @relation(fields: [DonatedBy],references: [userId])
  
}
model FoodClaim {
  claimId Int @id @default(autoincrement()) 
  claimedAt DateTime

  foodId Int
  food Food @relation(fields: [foodId],references: [foodId])

  claimedBy Int 
  org Organization @relation(fields: [claimedBy],references: [userId])

  deliver Boolean
  specialInstruction String?

  status     Status
}
model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int 
  action    ActionType   // e.g. "CREATE_FOOD", "CLAIM_FOOD", "UPDATE_PROFILE"
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}





